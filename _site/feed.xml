<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Little Demo Blog</title>
    <description>This is a small blog I made to showcase small coding projects.
</description>
    <link>http://ilianmm.github.io/</link>
    <atom:link href="http://ilianmm.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 08 Apr 2016 12:20:21 +0100</pubDate>
    <lastBuildDate>Fri, 08 Apr 2016 12:20:21 +0100</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Breakout mini-game with random generated bricks and brick collision angle adjustments</title>
        <description>&lt;script type=&quot;text/javascript&quot;&gt; 
/**
* Ball object used for all ball interactions 
*/
function Ball(x, y, radius, color) {
	this.x = x;
	this.y = y;

	this.dx = 6;
	this.dy = -6;
	this.dxRange = this.dx*2;
	
	this.startDX = 6;
	this.startDY = -6;

	this.radius = 10;

	this.color = color;

	/** 
	* Draws ball in canvas 
	*/
	this.draw = function(context) {
		context.save();
		
		context.translate(this.x, this.y);
	  
		context.fillStyle = this.color;
		
		context.beginPath();
		context.arc(0, 0, this.radius, 0, (Math.PI * 2), true);
		context.fill();
		context.closePath();
		context.restore();
	};

	/**
	* Defines collision behaviour with canvas borders 
	*/
	this.bound = function(canvas) {
		if ((this.x + this.dx &gt;= (canvas.width - this.radius)) ||
			(this.x + this.dx &lt;= this.radius)) {
			this.dx = -this.dx;
		} else if ((this.y + this.dy) &lt;= this.radius) {
			this.dy = -this.dy;
		};
	};


}
/**
* Brick object housing single brick logic
*/
function Brick(x, y, width, height, status, collisionPhysics) {
	this.x = x;
	this.y = y;

	// default colour
	// @TODO: Find a better way to define colour swaps
	this.color = &quot;#0085DD&quot;;

	this.status = status;

	this.width = width;
	this.height = height;
	this.collisionPhysics = collisionPhysics;

	/**
	* Changes colour of brick depending on status
	*
	* @TODO: Find a better way to define colour swaps
	*/
	this.colorise = function () {
		if (brick.status == 1) {
			return &quot;#0085DD&quot;;
		} else if(brick.status==2) {
			return &quot;#FF0000&quot;;						
		};

	};

	/** 
	* Defines ball collision behaviour when hitting a brick
	* 
	* @NOTE: If CollisionPhysics is enabled,then collision bounce angle will depend on the point of inpact
	* between the ball and the brick, otherwise all bounces have 90% angles.
	* 
	* @TODO: allow user to enable and disable at beginning of game
	* @return: boolean
	*/
	this.collision = function (ball) {
		if (this.status != 0 ) {
			if (ball.x &gt;= this.x-ball.radius &amp;&amp; ball.x &lt;= this.x + this.width + ball.radius 
				&amp;&amp; ball.y &gt;= this.y-ball.radius &amp;&amp; ball.y &lt;= this.y+this.height + ball.radius) {

				if (this.collisionPhysics) {
					var percentage = (ball.x - this.x)/this.width;
					ball.dx = (percentage * ball.dxRange) - (ball.dxRange/2);
				};
				
				ball.dy = -ball.dy;
				this.status--;
				return true;
			};
		} else {
			return false;
		};
	};
}
/**
* Creates Paddle object used by user
* @param (1): x
* @param (2): y
* @param (3): width
* @param (4): height
* @param (4): color
*/
function Paddle(x, y, width, height, color) {
	this.x = x;
	this.y = y;
	this.dx = 7;
	
	this.width = width;
	this.height = height;
	this.color = color;

	/**
	* Draws paddle
	*/
	this.draw = function(context) {
		context.beginPath();
		context.rect(this.x, this.y, this.width, this.height);
		context.fillStyle = this.color;
		context.fill();
		context.closePath();
		context.restore();
	};

	/**
	* Defines ball collision behaviour when hitting the paddle
	*
	* NOTE: Ball bounces at an angle depending on where it connects with the paddle
	*/
	this.collide = function(ball) {
		if ((ball.y+ball.radius&gt;=this.y) 
			&amp;&amp; (ball.x &gt; (this.x - ball.radius) &amp;&amp; ball.x &lt; this.x + this.width + ball.radius)) {
			var percentage = (ball.x - this.x) / this.width;
			ball.dx = (percentage * ball.dxRange) - (ball.dxRange/2);
			ball.dy = -ball.dy;
		};
	};
}
// A Collection of Functions supporting brick logic //

/**
* Itterates throuvh bricks array and checks for collision with ball. 
* If ball colides with brick, the score is increased, 
* check for level completion and respawns paddle/ball,
* and win alert is displayed if all levels are completed.
*/
function collisionDetection() {
				for(c=0; c&lt;BRICK_COLS; c++) {
					for(r=0; r&lt;BRICK_ROWS; r++) {
						brick = bricks[c][r];
						if (brick.collision(ball)) {
							score++;
							if (score == maxScore) {
								if(level != winLevel) {
									alert(&quot;You passed level &quot; + level + &quot;!&quot;);
									level++;
									respawn();
									generateBricks();
								} else {
									alert(&quot;You WIN! Congratulations!&quot;);
									document.location.reload();	
								};
							};
						};
					};
				};
			};

/**
* Iterates through array[c][r] and draws bricks
*/
function drawBricks() {
	for (c=0; c&lt;BRICK_COLS; c++) {
		for (r=0; r&lt;BRICK_ROWS; r++) {
			if (bricks[c][r].status != 0) {
				brick = bricks[c][r];
				brick.x = (c*(BRICK_WIDTH+BRICK_PADDING)+BRICK_OFFSET_LEFT);
				brick.y = (r*(BRICK_HEIGHT+BRICK_PADDING)+BRICK_OFFSET_TOP);
				ctx.beginPath();
				ctx.rect(brick.x, brick.y, brick.width, brick.height);
				ctx.fillStyle = brick.colorise();
				ctx.fill();
				ctx.closePath();
			};
		};
	};
};

/** 
* Iterates through array[c][r] and generates brick objects to fill canvas
*/
function generateBricks() {
	for (c=0; c&lt;BRICK_COLS; c++) {
		bricks[c] = [];
		for(r=0; r&lt;BRICK_ROWS; r++) {
			status = randomiseBrick(c,r);
			if (status == 1) {
				maxScore++;
			} else if(status == 2) {
				maxScore = maxScore+2;
			};
			bricks[c][r] = new Brick (0, 0, BRICK_WIDTH, BRICK_HEIGHT, status, BRICK_COLLISION_PHYSICS);
		};
	};
};

/** 
* Defines status of brick
* @TODO: Make a more sophisticated progressing system and randomisation system
*
* @param (1): brick columns
* @param (2): brick rows
*
* @return: brick status integer
*/
function randomiseBrick(c, r) {
	if (level == 1) {
		switch(r){
			case 0: return 1;
			default: return 0;
		};
	} else {
		switch (r) {
			default: return randomise();
		};
	};
};

/** 
* Provides random status for bricks based set probabilities
*
* @return: randomised brick status
*/
function randomise() {
	if (Math.floor(Math.random()*5)+1 == 1) {
		return 0;
	} else if (Math.floor(Math.random()*4)+1 == 1) {
		return 2;
	} else {
		return 1;
	};
};
/** 
* Draws Lives
*/
function drawLives() {
    ctx.font = &quot;16px Arial&quot;;
    ctx.fillStyle = &quot;#0095DD&quot;;
    ctx.fillText(&quot;Lives: &quot; + lives, canvas.width-65, 20);
};

/** 
* Draws Score
*/
function drawScore() {
	ctx.beginPath();
	ctx.font = &quot;16px Arial&quot;;
	ctx.fillStyle = &quot;#0095DD&quot;;
	ctx.fillText(&quot;Score: &quot;+score, 8, 20);
	ctx.closePath();
};

/** 
* Tracks pressed keys and handles movement, pause and start
* 
* @param: event
*/
function keyDownHandler(e) {
	if(e.keyCode==39) {
		rightPressed = true;
	} else if (e.keyCode==37) {
		leftPressed = true;
	} else if (e.keyCode==32) {
		pausePressed = !pausePressed;
	} else if (e.keyCode==13 || e.keyCode==38) {
		console.log(&quot;startPressed=&quot; + startPressed);
		startPressed = true;
	};
};
/** 
* Tracks keys going up and handles movement
* 
* @param: event
*/
function keyUpHandler(e) {
	if(e.keyCode==39) {
		rightPressed = false;
	} else if (e.keyCode==37) {
		leftPressed = false;
	} else if (e.keyCode==32) {
	};
};

/** 
* Tracks mouse and defines paddle mouse control
* 
* @param: event
*/
function mouseMoveHandler(e) {
	if (!pausePressed) {
		var relativeX = e.clientX - canvas.offsetLeft;
		if(relativeX-paddle.width/2 &gt; 0 &amp;&amp; relativeX+paddle.width/2 &lt; canvas.width) {
			paddle.x = relativeX - paddle.width/2;
			if(!startPressed) {
				ball.x = relativeX;
			};
		};
	};
};

/** 
* Checks whether player is dead and removes life.
* If player is dead, it returns false. Otherwise, respawns paddle and ball in middle
* 
* @return: boolean
*/
function isDead() {
	if (lives-1 &lt; 1) {
		lives--;
		return true;
	} else {
		lives--;
		respawn();
	    return false;
	};
};

/** 
* Respawns playet and ball at the middle of the canvas
*/
function respawn() {
	ball.x = canvas.width/2;
	ball.y = BALL_Y_MARGIN;
	ball.dx = ball.startDX;
	ball.dy = ball.startDY;
	paddle.x = PADDLE_START_X;
	startPressed = false;
};

&lt;/script&gt;

&lt;html&gt;
	&lt;head&gt;
		&lt;meta charset=&quot;UTF-8&quot; /&gt;
		&lt;style&gt;
			* {
				padding: 0;
				margin: 0;
			}
			canvas {
				background: #eee;
				display: block;
				margin: 10px 0 10px 0;
			}
		&lt;/style&gt;
			&lt;!--  Include only outside Jekyll
			&lt;script type=&quot;text/javascript&quot; src=&quot;js/paddle.js&quot;&gt;&lt;/script&gt;
			&lt;script type=&quot;text/javascript&quot; src=&quot;js/ball.js&quot;&gt;&lt;/script&gt;	
			&lt;script type=&quot;text/javascript&quot; src=&quot;js/brick.js&quot;&gt;&lt;/script&gt;
			&lt;script type=&quot;text/javascript&quot; src=&quot;js/brickHelper.js&quot;&gt;&lt;/script&gt;
			&lt;script type=&quot;text/javascript&quot; src=&quot;js/gameHelper.js&quot;&gt;&lt;/script&gt;
			--&gt;
		&lt;script&gt;
			var canvas;
			var ctx;

			// key press recognition
			var rightPressed;
			var leftPressed;
			var startPressed;
			var pausePressed;
			
			// score, lives and levels
			var score = 0;
			var lives = 3;
			var level = 1;
			var winLevel = 5;
			var maxScore = 0;

			// paddle and paddle constants
			var paddle;
			var PADDLE_WIDTH = 75;
			var PADDLE_HEIGHT = 10;
			var PADDLE_Y_MARGIN;
			var PADDLE_START_X;
			var PADDLE_COLOR = &quot;#0085DD&quot;;

			// ball variables &amp; constants
			var ball;
			var BALL_RADIUS = 10;
			var BALL_COLOR = &quot;#0085DD&quot;;
			var BALL_Y_MARGIN;

			// brick variables &amp; constants
			var brick;
			var BRICK_WIDTH = 75; 
			var BRICK_HEIGHT = 20; 
			var BRICK_COLOR = &quot;#0085DD&quot;;
			var BRICK_STATUS = 1;
			var BRICK_COLLISION_PHYSICS = false; 
			var BRICK_COLS = 6;
			var BRICK_ROWS = 4;
			var BRICK_OFFSET_TOP = 50;
			var BRICK_OFFSET_LEFT = 40;
			var BRICK_PADDING = 10;
			var bricks;

			function init() {
				canvas = document.getElementById(&quot;myCanvas&quot;);
				ctx = canvas.getContext(&quot;2d&quot;);

				PADDLE_START_X = (canvas.width - PADDLE_WIDTH)/2;
				BALL_Y_MARGIN = canvas.height-31;
				PADDLE_Y_MARGIN = canvas.height-20;

				//create paddle and ball objects
				ball = new Ball(canvas.width/2, BALL_Y_MARGIN, BALL_RADIUS, BALL_COLOR);
				paddle = new Paddle(PADDLE_START_X, PADDLE_Y_MARGIN, PADDLE_WIDTH, PADDLE_HEIGHT, PADDLE_COLOR);

				// user input variables
				startPressed = false;
				rightPressed = false;
				leftPressed = false;
				pausePressed = false;
				document.addEventListener(&quot;keydown&quot;, keyDownHandler, false);
				document.addEventListener(&quot;keyup&quot;, keyUpHandler, false);
				document.addEventListener(&quot;mousemove&quot;, mouseMoveHandler, false);

				// see brickHelper.js
				bricks = [];
				generateBricks();

				loop();
				//setInterva() is better for testing purposes, as the frame rates can be manipulated
				//setInterval(loop, 15); 

			}; 

			//Houses all game logic and animation
			function loop() {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				requestAnimationFrame(loop);

				//define collissoion and boundary behaviour
				ball.bound(canvas);
				paddle.collide(ball);
				collisionDetection();

				//draw objects
				ball.draw(ctx);
				paddle.draw(ctx);
				drawScore();
				drawLives();
				drawBricks();

				// Game over logic - refer to gameHeper.js
				if ((ball.y+ball.dy) &gt; (canvas.height-ball.radius)) {
					if (isDead()) {
						alert(&quot;GAME OVER&quot;);
						document.location.reload();	
					};
				};



				// ball movement logic
				if (startPressed &amp;&amp; !pausePressed) {
					ball.x += ball.dx;
					ball.y += ball.dy;
				};

				// paddle movement logic
				if (!pausePressed) {
					if(rightPressed &amp;&amp; paddle.x &lt; canvas.width-paddle.width){
						paddle.x += paddle.dx;
						if(!startPressed) {
							ball.x += paddle.dx;
						};
					} else if (leftPressed &amp;&amp; paddle.x &gt; 0) {
						paddle.x -= paddle.dx;
						if(!startPressed) {
							ball.x -= paddle.dx;
						};
					};
				};
			};

		&lt;/script&gt;
	&lt;/head&gt;

	&lt;body onload=&quot;init()&quot;&gt;
		&lt;h1&gt;Game Rules:&lt;/h1&gt;
		&lt;p&gt;Press Enter or Up arrow to start.&lt;br /&gt;
			Press Space to pause.&lt;br /&gt;
			Press Left Arrow and Right Arrow to move paddle, or use mouse.&lt;/p&gt;
		&lt;canvas id=&quot;myCanvas&quot; height=&quot;400&quot; width=&quot;600&quot;&gt;&lt;/canvas&gt;




	&lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;Code is available in my &lt;a href=&quot;https://github.com/ilianmm/&quot;&gt;GitHub Repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Apr 2016 07:20:52 +0100</pubDate>
        <link>http://ilianmm.github.io/breakout/2016/04/08/Breakout.html</link>
        <guid isPermaLink="true">http://ilianmm.github.io/breakout/2016/04/08/Breakout.html</guid>
        
        
        <category>breakout</category>
        
      </item>
    
      <item>
        <title>Unity Space Shooter Mini-Game</title>
        <description>&lt;p&gt;The Game can be played &lt;a href=&quot;http://ilianmm.github.io/SpaceShooter.v.0.5.5/v.0.5.5.html&quot;&gt;here&lt;/a&gt;. Controls are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keyboard Arrows to move.&lt;/li&gt;
  &lt;li&gt;Left Ctrl or Left Mouse Button to shoot.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Code is available in my &lt;a href=&quot;https://github.com/ilianmm/&quot;&gt;GitHub Repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Apr 2016 14:20:52 +0100</pubDate>
        <link>http://ilianmm.github.io/spaceshooter/2016/04/07/SpaceShooter.html</link>
        <guid isPermaLink="true">http://ilianmm.github.io/spaceshooter/2016/04/07/SpaceShooter.html</guid>
        
        
        <category>spaceshooter</category>
        
      </item>
    
  </channel>
</rss>
